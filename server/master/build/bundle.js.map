{"version":3,"sources":["webpack:///webpack/bootstrap aac24b6dd3c3fa58a0ef","webpack:///./server.js","webpack:///external \"cluster\"","webpack:///external \"os\"","webpack:///external \"dotenv\"","webpack:///external \"express\"","webpack:///external \"http-proxy\""],"names":[],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;AC7DA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,qFAA4C;;AAE5C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,YAAY;;AAEtC,mBAAmB,aAAa;AAChC;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;AACL,CAAC;AACD,0BAA0B,YAAY;;AAEtC;AACA;;AAEA;AACA;AACA;AACA,kCAAkC,OAAO,GAAG,OAAO;AACnD,aAAa;AACb,SAAS;AACT,KAAK;;AAEL;AACA,iDAAiD,KAAK;AACtD,KAAK;AACL,C;;;;;;ACxDA,oC;;;;;;ACAA,+B;;;;;;ACAA,mC;;;;;;ACAA,oC;;;;;;ACAA,uC","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap aac24b6dd3c3fa58a0ef","import cluster from 'cluster'\nimport os from 'os'\nimport dotenv from 'dotenv'\nimport express from 'express'\nimport httpProxy from 'http-proxy'\n\ndotenv.config()\n\nconst numCPUs = os.cpus().length\nconst app = express()\nconst proxy = httpProxy.createProxyServer({})\n\nconst addresses = [\n    {\n        host: '0.0.0.0',\n        port: 9001\n    },\n    {\n        host: '0.0.0.0',\n        port: 9002\n    },\n    {\n        host: '0.0.0.0',\n        port: 9003\n    }\n]\n\nif (cluster.isMaster) {\n    console.log(`Master ${process.pid} is running`)\n\n    for (let i = 0; i < numCPUs; i++) {\n        cluster.fork()\n    }\n\n    cluster.on('exit', (worker, code, signal) => {\n        console.log(`worker %d died (%s). restarting...`, worker.process.pid, signal || code)\n\n        cluster.fork()\n    })\n} else {\n    console.log(`Worker ${process.pid} is running`)\n\n    const args = process.argv.splice(2)\n    const port = args[0] || process.env.PORT\n\n    app.use((req, res) => {\n        addresses.forEach(a => {\n            proxy.web(req, res, {\n                target: `http://${a.host}:${a.port}`\n            })\n        })\n    })\n    \n    app.listen(port, '0.0.0.0', () => {\n        console.log(`Server is running on port ${port}.`)\n    })\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./server.js\n// module id = 0\n// module chunks = 0","module.exports = require(\"cluster\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"cluster\"\n// module id = 1\n// module chunks = 0","module.exports = require(\"os\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"os\"\n// module id = 2\n// module chunks = 0","module.exports = require(\"dotenv\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"dotenv\"\n// module id = 3\n// module chunks = 0","module.exports = require(\"express\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"express\"\n// module id = 4\n// module chunks = 0","module.exports = require(\"http-proxy\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"http-proxy\"\n// module id = 5\n// module chunks = 0"],"sourceRoot":""}